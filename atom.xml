<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[logan computes.]]></title>
  <link href="http://loganhasson.github.io/atom.xml" rel="self"/>
  <link href="http://loganhasson.github.io/"/>
  <updated>2013-10-07T23:53:34-04:00</updated>
  <id>http://loganhasson.github.io/</id>
  <author>
    <name><![CDATA[Logan Hasson]]></name>
    <email><![CDATA[loganhasson@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Jason Arhart Talks RSpec]]></title>
    <link href="http://loganhasson.github.io/blog/2013/10/07/jason-arhart-talks-rspec/"/>
    <updated>2013-10-07T23:31:00-04:00</updated>
    <id>http://loganhasson.github.io/blog/2013/10/07/jason-arhart-talks-rspec</id>
    <content type="html"><![CDATA[<p>We&rsquo;ve been spending a lot of time thinking about and implementing test-driven development
using RSpec at <a href="http://www.flatironschool.com">Flatiron School</a> these past several days.
While I certainly love the <em>idea</em> of loving TDD, I&rsquo;ve found myself struggling to understand exactly
how to effectively start dipping my toe into the Ruby testing pool.</p>

<p>It&rsquo;s not that I don&rsquo;t grasp the concept of testing first. Rather, I haven&rsquo;t been able to
figure out the appropriate tests to write before I actually start coding. I often find myself combining
the following steps:</p>

<pre><code>1. Pseudo coding a solution to the programming problem
2. Thinking of how I could test that pseudo code
3. Thinking of how I could turn that pseudo code into Ruby
4. Thinking of tests to write to test that code
</code></pre>

<p>Sadly, this creates a very un-TDD workflow. I either write tests that are completely
unrelated to my eventual code, or I end up writing code and then creating tests that
conform to that code.</p>

<p>I came across a wonderful <a href="https://speakerdeck.com/lvrug/rspec-for-beginners-jason-arhart">deck by Jason Arhart</a> today, though,
that has finally (sort of) given me a sense of how to approach this whole TDD thing. This slide in particular was my &ldquo;aha&rdquo;
moment&hellip;</p>

<script async class="speakerdeck-embed" data-slide="11" data-id="ec123320ddad0130679a56e32e49313d" data-ratio="1.74446337308348" src="http://loganhasson.github.io//speakerdeck.com/assets/embed.js"></script>


<p>It seems so simple, but the line &ldquo;focus on <strong>what</strong> before <strong>how</strong>&rdquo; is quite a brilliant way of putting it.</p>

<p>I&rsquo;d been struggling to write effective RSpec tests (let alone even come up with tests <em>at all</em>) because
I was approaching the whole process with a &ldquo;how&rdquo; mindset. I thought of my tests in the context of how I&rsquo;d be solving the
programming problem that was before me, rather than as a way to clearly document and test the &ldquo;what&rdquo; of the problem. The distinction is nuanced, but the way to properly test is to think, &ldquo;what should my methods/objects/whatevers be doing?&rdquo; instead of &ldquo;how am I going to get my methods/objects/whatevers to solve this problem and also prove to some test that they are working?&rdquo;</p>

<p>Of course, I still couldn&rsquo;t whip together a good test suite right now, but this presentation has given me much more clarity as to how I should actually approach writing passable (hah!) test stuites in the near future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bash trash]]></title>
    <link href="http://loganhasson.github.io/blog/2013/09/25/bash-trash/"/>
    <updated>2013-09-25T16:48:00-04:00</updated>
    <id>http://loganhasson.github.io/blog/2013/09/25/bash-trash</id>
    <content type="html"><![CDATA[<p>This isn&rsquo;t too terribly exciting, but I&rsquo;ve been on a big &ldquo;write-everything-in-fact-<em>all-the-things</em>-as-functions-for-bash&rdquo; kick these last couple of days, and I am pretty happy with my latest one. Though I rarely find myself in the position of having files in my Trash any more, I still occasionally drag something in there from my downloads folder (since they are right next door to one another on my dock). I hate, hate, hate, hate, hate having a cluttered Trash icon, so I empty it all the time.</p>

<p>While it&rsquo;s totally possible to just press <code>Shift+Command+Delete</code> while in Finder, I&rsquo;d much rather not have to switch out of terimal if possible. So, I wrote this little function and threw it in my .bash_profile. Now, whenever I want to empty the trash, I just have to type <code>empty</code>. It&rsquo;s lovely. And as a bonus, I even get to see how many files were deleted.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function empty () {
</span><span class='line'>  pushd ~/.Trash &gt; /dev/null
</span><span class='line'>  tmp=$(rm -rfv * | wc -l | sed -e 's/^[ \t]*//')
</span><span class='line'>  if [ $tmp == "1" ]; then
</span><span class='line'>    echo "$tmp file was removed."
</span><span class='line'>  else
</span><span class='line'>    echo "$tmp files were removed."
</span><span class='line'>  fi
</span><span class='line'>  pushd &gt; /dev/null
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s a commented version if you&rsquo;re interested. (Note, I looked up the regular expression for one of the commands. Regular expressions are hard.)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Commented Version
</span><span class='line'># USE: empty
</span><span class='line'> 
</span><span class='line'>function empty () {
</span><span class='line'>  # push the CWD into the stack and change to the ~/.Trash directory. Pipe this output to /dev/null so it doesn't print to
</span><span class='line'>  # the console
</span><span class='line'>
</span><span class='line'>  pushd ~/.Trash &gt; /dev/null
</span><span class='line'>
</span><span class='line'>  # assign a variable, tmp, to the following
</span><span class='line'>  # rm -rfv * deletes everything in the trash. the -v flag tells it to echo each file as it deletes
</span><span class='line'>  # this is then piped to wc -l, which counts the lines that were outputted
</span><span class='line'>  # that count gets a bunch of whitespace put in front of it for some reason, and is piped to the stream editor (sed), and the
</span><span class='line'>  # -e flag lets us pass a fancy regex to strip the leading whitespace
</span><span class='line'>
</span><span class='line'>  tmp=$(rm -rfv * | wc -l | sed -e 's/^[ \t]*//')
</span><span class='line'>
</span><span class='line'>  # check to see if $tmp is 1, if so we want to echo singular "file"
</span><span class='line'>
</span><span class='line'>  if [ $tmp == "1" ]; then
</span><span class='line'>    echo "$tmp file was removed."
</span><span class='line'>  else
</span><span class='line'>
</span><span class='line'>  # otherwise echo plural "files"
</span><span class='line'>
</span><span class='line'>    echo "$tmp files were removed."
</span><span class='line'>  fi
</span><span class='line'>
</span><span class='line'>  # pushd again brings us back to the directory we were in before running the command, and the output is again piped to
</span><span class='line'>  # /dev/null
</span><span class='line'>
</span><span class='line'>  pushd &gt; /dev/null
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[understanding rebasing]]></title>
    <link href="http://loganhasson.github.io/blog/2013/09/24/understanding-rebasing/"/>
    <updated>2013-09-24T16:48:00-04:00</updated>
    <id>http://loganhasson.github.io/blog/2013/09/24/understanding-rebasing</id>
    <content type="html"><![CDATA[<p>Today was full of pulling and fetching and branching and merging and commiting and, yes, the dreaded <strong>rebasing</strong>. I&rsquo;ll admit: before today, though I&rsquo;d read about it on multiple occasions, rebasing in Git still made my brain physically hurt. And even as today wore on, I found myself more and more perplexed by this scary, repo-busting command.</p>

<p>Until I had an epiphany.</p>

<p>Git rebasing makes sense when you realize that <em>it does exactly what the name says it&rsquo;ll do.</em> Stick with me here.</p>

<p>Let&rsquo;s, for a second, imagine we have a repo that looks something like this:</p>

<p><img src="http://loganhasson.github.io/images/repo-1.jpg" alt="A possible Git repository" /></p>

<p>Now, let&rsquo;s throw out all we know about rebasing (or think we know about rebasing), and just concentrate on what the command actually says. If we rebase <code>feature</code> onto <code>master</code>, we are literally changing the base (or parent!) of <code>feature</code>.</p>

<p>Let&rsquo;s look at the repo again, but this time with a bit more descriptors:</p>

<p><img src="http://loganhasson.github.io/images/repo-2.jpg" alt="A more verbose Git repository" /></p>

<p>As it stands, <code>feature</code> begins it&rsquo;s life as a child of our second commit. If we <code>rebase</code> it onto <code>master</code> we are essentially saying, &ldquo;Nope, let&rsquo;s rewrite history. Let&rsquo;s pretend that <code>feature</code> began it&rsquo;s life as a child of our sixth commit (the most current commit in the <code>master</code> branch).&rdquo; So to make this rebase happen, we run the following commands:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout feature
</span><span class='line'>git rebase master</span></code></pre></td></tr></table></div></figure>


<p>What Git does, to rewrite history, is take every commit between <strong>C2</strong> and <strong>C6</strong> (inclusive) and apply it to the <code>feature</code> branch. Because, for the <code>feature</code> branch to have a new base, it needs to know the whole history of that particlar base (parent).</p>

<p>(Essentially, <code>feature</code> needs to get caught up. And for that to happen, it needs to &ldquo;know&rdquo; everything the <code>master</code> branch &ldquo;knows&rdquo; up until the current moment. And how can that happen? Git has to, one by one, apply every change (commit) in <code>master</code>&rsquo;s history to <code>feature</code>.)</p>

<p>Now, our repo looks like this:</p>

<p><img src="http://loganhasson.github.io/images/repo-3.jpg" alt="A Git repository after rebasing" /></p>

<p>Woah! Now we have a nice clean history (it&rsquo;s all linear and stuff!), but <code>feature</code> is ahead of <code>master</code>. Why is that?</p>

<p>This is what initially confused the heck out of me, once I thought I understood rebasing. There&rsquo;s two things to keep in mind for this to make sense:</p>

<ul>
<li>The whole &ldquo;rebase onto&rdquo; nomenclature is, in and of itself, somewhat confusing.</li>
<li>If we hadn&rsquo;t rebased or merged, the <code>master</code> branch would never have any concept of the <code>feature</code> branch after our second commit.</li>
</ul>


<p>Let&rsquo;s tackle these points one at a time.</p>

<p>1) <em>The whole &ldquo;rebase onto&rdquo; nomenclature is, in and of itself, somewhat confusing.</em></p>

<p>Here&rsquo;s the thing. Everything I&rsquo;ve written before this is based upon the fact that the <code>rebase</code> command actually does what it&rsquo;s name implies. Cool. However, when we add the word &ldquo;onto&rdquo; into the mix, things get confusing. To me, <code>rebase onto</code> (combined with the myriad descriptions of rebasing as the rewinding of and playing back of commits onto one branch or another) makes it seem as if the branch being, erm, rebased onto, is being acted upon in some way.</p>

<p><strong>It isn&rsquo;t.</strong></p>

<p>2) <em>If we hadn&rsquo;t rebased or merged, the <code>master</code> branch would never have any concept of the <code>feature</code> branch after our second commit.</em></p>

<p>Let&rsquo;s look at another version of our original repo, but with some files added to the mix. (Each time you see a file name next to a commit, this means the file was created and commited in that commit. These are simplistic commits for explanation purposes.)</p>

<p><img src="http://loganhasson.github.io/images/repo-4.jpg" alt="A Git repository with some files" /></p>

<p>Cool. Now let&rsquo;s look at the same repository, but this time with the files carried through from one commit to the next. In other words, now we&rsquo;ll look at what files each commit knows about:</p>

<p><img src="http://loganhasson.github.io/images/repo-5.jpg" alt="A Git repository with some files and inheritance" /></p>

<p>Now, if we created a new branch off of <code>master</code> right now, what files would it inherit?</p>

<p>If you said <em>files 1, 2, 3, 8, 9, and 10</em>, then you&rsquo;d be right.</p>

<p>So if we rebase a branch onto <code>master</code> now, it too would know about those files. (It&rsquo;s new parent is our current <code>master</code> branch, and thus inherits everything from that branch.)</p>

<p><img src="http://loganhasson.github.io/images/repo-6.jpg" alt="A Git repository with some files and inheritance after rebase" /></p>

<p>But if you notice from that image above, our <code>master</code> branch has no clue that <em>files 4, 5, 6, and 7</em> exist. Rebasing our <code>feature</code> branch, which does know about those files, onto <code>master</code> just means that now <code>feature</code> knows about <em>files 1, 2, 3, 8, 9, and 10</em>, just as any new branch would at this point!</p>

<p>Aha! So in order to catch <code>master</code> up on all the lovely things that we&rsquo;ve been working on in <code>feature</code> branch, we still need to merge after the rebase is complete. And then, we get this:</p>

<p><img src="http://loganhasson.github.io/images/repo-7.jpg" alt="A Git repository after rebase and merge" /></p>

<p>But, bonus side effect: we don&rsquo;t have to worry about conflicts. Sweet.</p>

<p>Phew. Git rocks.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hello world]]></title>
    <link href="http://loganhasson.github.io/blog/2013/09/24/hello-world/"/>
    <updated>2013-09-24T16:48:00-04:00</updated>
    <id>http://loganhasson.github.io/blog/2013/09/24/hello-world</id>
    <content type="html"><![CDATA[<p>Hi, kids. The name&rsquo;s Logan. Let&rsquo;s see what happens when I go ahead and publish this post.</p>

<p>&hellip;</p>

<p>Look, it worked!</p>

<p>Go checkout my first <a href="http://loganhasson.github.io/blog/2013/09/24/understanding-rebasing/">real post</a></p>
]]></content>
  </entry>
  
</feed>
